def show_image(title, img):
    img = cv.resize(img, (0, 0), fx=1.2, fy=1.2)
    cv.imshow(title, img)
    #cv.waitKey(0)
    #cv.destroyAllWindows()

def display_images(img_vector, num_img_per_row=2, num_images_per_col=4):
    fig, axs = plt.subplots(num_images_per_col, num_img_per_row, figsize=(15, 15))
    axs = axs.flatten()

    for i, ax in enumerate(axs):
        ax.imshow(img_vector[i], cmap='gray')
        ax.axis('off')  # Turn off axis labels
        ax.set_title(f'Image {i+1}', fontsize=5)  # Set a title for each image

    plt.tight_layout()  # Adjust layout to prevent overlap
    plt.show()

def display_center_point(img, x_center, y_center):
    plt.imshow(img, cmap='gray')
    plt.scatter(x_center, y_center, c='yellow', marker='x', label='Center Point')
    
    plt.title('Fingerprint with Center Point')
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.legend()
    plt.show()

def plot_sectors(param_points_each_sector, param_h_roi, param_nr_bands, param_nr_sectors_band):
    images = []
    
    colors_rgb = [
        np.array([255, 0, 0]),     # Red
        np.array([0, 255, 0]),     # Green
        np.array([0, 0, 255]),     # Blue
        np.array([255, 255, 0]),   # Yellow
        np.array([255, 0, 255]),   # Magenta
        np.array([0, 255, 255]),   # Cyan
        np.array([128, 0, 0]),     # Maroon
        np.array([0, 128, 0]),     # Dark Green
        np.array([0, 0, 128]),     # Navy
        np.array([128, 128, 0]),   # Olive
        np.array([128, 0, 128]),   # Purple
        np.array([0, 128, 128]),   # Teal
        np.array([255, 165, 0]),   # Orange
        np.array([255, 192, 203]), # Pink
        np.array([128, 128, 128]), # Gray
        np.array([255, 255, 255])  # White
    ]

    cnt = 0

    for i in range(param_nr_bands):
        image = np.ones((param_h_roi, param_h_roi), dtype=np.uint8)   
        image = cv.cvtColor(image, cv.COLOR_GRAY2RGB) 

        for j in range(param_nr_sectors_band):
            for idx in param_points_each_sector[cnt]:
                image[idx[0], idx[1]] = colors_rgb[j]
        
            cnt += 1
            
        images.append(image)
    

    fig, axs = plt.subplots(1, 5, figsize=(15, 15))
    axs = axs.flatten()

    for i, ax in enumerate(axs):
        ax.imshow(images[i])
        ax.axis('off')  # Turn off axis labels
        ax.set_title(f'Image {i+1}', fontsize=5)  # Set a title for each image

    plt.tight_layout()  # Adjust layout to prevent overlap
    plt.show()


def plot_circles_and_lines(param_h_roi, param_nr_sectors, param_band_width, param_nr_sectors_band):
    fig, ax = plt.subplots(figsize=(6, 6))

    fingerprint = np.ones((param_h_roi, param_h_roi))
    ax.imshow(fingerprint, cmap='gray', origin='upper')

    x_center, y_center = param_h_roi // 2, param_h_roi // 2

    ax.text(x_center, y_center, 'X', color='red', ha='center', va='center', fontsize=12)

    for i in range(6):
        circle = Circle((x_center, y_center), (i + 1) * param_band_width, fill=False, edgecolor='red', lw=1.2)
        ax.add_patch(circle)

    vect_angles = [(i % param_nr_sectors_band) * (2 * 180.0 / param_nr_sectors_band) for i in range(param_nr_sectors)]

    for angle in vect_angles:
        rad_angle = math.radians(angle)
        x_end = x_center + ((param_h_roi - 10) / 2) * np.cos(rad_angle)
        y_end = y_center + ((param_h_roi - 10) / 2) * np.sin(rad_angle)
        x_c = x_center + param_band_width * np.cos(rad_angle)
        y_c = y_center + param_band_width * np.sin(rad_angle)

        ax.plot([x_c, x_end], [y_c, y_end], 'red')

    ax.set_xlim(0, param_h_roi)
    ax.set_ylim(0, param_h_roi)
    ax.set_aspect('equal', adjustable='box')
    plt.show()